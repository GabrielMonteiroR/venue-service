// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using venue_service.Src.Contexts;

#nullable disable

namespace venue_service.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250316202905_FixStatusToVenueStatusId")]
    partial class FixStatusToVenueStatusId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("venue_service.Src.Models.EquipamentBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand_name");

                    b.HasKey("Id");

                    b.ToTable("equipament_brands", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.EquipamentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.ToTable("equipament_types", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.LocationAvailabilityTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailableTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("available_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("VenueAvailabilityId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_availability_id");

                    b.Property<int>("VenueStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_status_id");

                    b.HasKey("Id");

                    b.HasIndex("VenueAvailabilityId");

                    b.HasIndex("VenueStatusId");

                    b.ToTable("location_availability_times", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("LocationAvailabilityTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("location_availability_time_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("Id");

                    b.HasIndex("LocationAvailabilityTimeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VenueId");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sports", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.User_Venue", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("UserId", "VenueId");

                    b.HasIndex("VenueId");

                    b.ToTable("user_venues", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address");

                    b.Property<bool>("AllowLocalPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_local_payment");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("rules");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("VenueAvaliabilityId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_avaliability_id");

                    b.Property<int>("VenueTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_type_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VenueTypeId");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("Id");

                    b.HasIndex("VenueId")
                        .IsUnique();

                    b.ToTable("venue_availability", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("venue_contact_infos", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueEquipament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipamentBrandId")
                        .HasColumnType("integer")
                        .HasColumnName("equipament_brand_id");

                    b.Property<string>("EquipamentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("equipament_name");

                    b.Property<int>("EquipamentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("equipament_type_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("Id");

                    b.HasIndex("EquipamentBrandId");

                    b.HasIndex("EquipamentTypeId");

                    b.HasIndex("VenueId");

                    b.ToTable("venue_equipaments", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("image_url");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("venue_images", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("venue_status", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("venue_types", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.Venue_Sport", b =>
                {
                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.Property<int?>("SportId1")
                        .HasColumnType("integer");

                    b.HasKey("VenueId", "SportId");

                    b.HasIndex("SportId");

                    b.HasIndex("SportId1");

                    b.ToTable("venue_sports", (string)null);
                });

            modelBuilder.Entity("venue_service.Src.Models.LocationAvailabilityTime", b =>
                {
                    b.HasOne("venue_service.Src.Models.VenueAvailability", "VenueAvailability")
                        .WithMany("LocationAvailabilityTimes")
                        .HasForeignKey("VenueAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.VenueStatus", "VenueStatus")
                        .WithMany()
                        .HasForeignKey("VenueStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VenueAvailability");

                    b.Navigation("VenueStatus");
                });

            modelBuilder.Entity("venue_service.Src.Models.Reservation", b =>
                {
                    b.HasOne("venue_service.Src.Models.LocationAvailabilityTime", "LocationAvailabilityTime")
                        .WithMany()
                        .HasForeignKey("LocationAvailabilityTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationAvailabilityTime");

                    b.Navigation("User");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("venue_service.Src.Models.User", b =>
                {
                    b.HasOne("venue_service.Src.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("venue_service.Src.Models.User_Venue", b =>
                {
                    b.HasOne("venue_service.Src.Models.User", "User")
                        .WithMany("UserVenues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.Venue", "Venue")
                        .WithMany("UserVenues")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("venue_service.Src.Models.Venue", b =>
                {
                    b.HasOne("venue_service.Src.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.VenueType", "VenueType")
                        .WithMany()
                        .HasForeignKey("VenueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("VenueType");
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueAvailability", b =>
                {
                    b.HasOne("venue_service.Src.Models.Venue", "Venue")
                        .WithOne("VenueAvaliability")
                        .HasForeignKey("venue_service.Src.Models.VenueAvailability", "VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueContactInfo", b =>
                {
                    b.HasOne("venue_service.Src.Models.Venue", "Venue")
                        .WithMany("VenueContactInfos")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueEquipament", b =>
                {
                    b.HasOne("venue_service.Src.Models.EquipamentBrand", "EquipamentBrand")
                        .WithMany("VenueEquipaments")
                        .HasForeignKey("EquipamentBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.EquipamentType", "EquipamentType")
                        .WithMany("VenueEquipaments")
                        .HasForeignKey("EquipamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.Venue", "Venue")
                        .WithMany("VenueEquipaments")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipamentBrand");

                    b.Navigation("EquipamentType");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueImage", b =>
                {
                    b.HasOne("venue_service.Src.Models.Venue", "Venue")
                        .WithMany("VenueImages")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("venue_service.Src.Models.Venue_Sport", b =>
                {
                    b.HasOne("venue_service.Src.Models.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("venue_service.Src.Models.Sport", null)
                        .WithMany("VenueSports")
                        .HasForeignKey("SportId1");

                    b.HasOne("venue_service.Src.Models.Venue", "Venue")
                        .WithMany("VenueSports")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("venue_service.Src.Models.EquipamentBrand", b =>
                {
                    b.Navigation("VenueEquipaments");
                });

            modelBuilder.Entity("venue_service.Src.Models.EquipamentType", b =>
                {
                    b.Navigation("VenueEquipaments");
                });

            modelBuilder.Entity("venue_service.Src.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("venue_service.Src.Models.Sport", b =>
                {
                    b.Navigation("VenueSports");
                });

            modelBuilder.Entity("venue_service.Src.Models.User", b =>
                {
                    b.Navigation("UserVenues");
                });

            modelBuilder.Entity("venue_service.Src.Models.Venue", b =>
                {
                    b.Navigation("UserVenues");

                    b.Navigation("VenueAvaliability")
                        .IsRequired();

                    b.Navigation("VenueContactInfos");

                    b.Navigation("VenueEquipaments");

                    b.Navigation("VenueImages");

                    b.Navigation("VenueSports");
                });

            modelBuilder.Entity("venue_service.Src.Models.VenueAvailability", b =>
                {
                    b.Navigation("LocationAvailabilityTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
